{"version":3,"sources":["../src/sse.ts"],"sourcesContent":["import { appConfig } from '@trs/config'\r\n\r\nlet SSE_URL: string = appConfig('VITE_SSE_URL') || appConfig('NEXT_PUBLIC_SSE_URL') || 'http://localhost:3000/api/sse'\r\nSSE_URL += '?userID=3'\r\n\r\ninterface SseConnection {\r\n  eventSource: EventSource | null\r\n  listeners: Map<string, { handlers: Set<(event: MessageEvent) => void>, masterHandler: (event: MessageEvent) => void }>\r\n}\r\n\r\nlet sseConnection: SseConnection | null = null\r\n\r\nfunction getGlobalConnection(): SseConnection {\r\n  if (sseConnection) {\r\n    return sseConnection\r\n  }\r\n\r\n  if (typeof window === 'undefined' || !window.EventSource) {\r\n    console.error('EventSource is not supported in this environment.')\r\n    sseConnection = { eventSource: null, listeners: new Map() } // Store a virtual connection\r\n    return sseConnection\r\n  }\r\n\r\n  console.log(`Initializing global SSE connection to: ${SSE_URL}`)\r\n  const eventSource = new EventSource(SSE_URL)\r\n  const listeners = new Map()\r\n  sseConnection = { eventSource, listeners }\r\n\r\n  eventSource.onmessage = (event: MessageEvent) => {\r\n    console.log(`Received default message:`, event.data)\r\n  }\r\n\r\n  eventSource.onerror = (error: Event) => {\r\n    console.error(`Global EventSource failed:`, error)\r\n    eventSource.close()\r\n    sseConnection = null\r\n  }\r\n\r\n  return sseConnection\r\n}\r\n\r\n/**\r\n * 订阅一个 Server-Sent Event。\r\n * @param {string} eventName - 要监听的事件名称\r\n * @param {(data: any) => void} onMessage - 收到消息时的回调函数\r\n * @returns {() => void} - 一个用于取消订阅的函数\r\n */\r\nexport function subscribeToSSE(eventName: string, onMessage: (data: any) => void): () => void {\r\n  if (typeof onMessage !== 'function') {\r\n    console.error('onMessage callback must be a function.')\r\n    return () => {}\r\n  }\r\n\r\n  const { eventSource, listeners } = getGlobalConnection()\r\n\r\n  if (!eventSource) {\r\n    return () => {}\r\n  }\r\n\r\n  const handler = (event: MessageEvent) => {\r\n    try {\r\n      const data = JSON.parse(event.data)\r\n      onMessage(data)\r\n    }\r\n    catch (error) {\r\n      onMessage(error || event.data)\r\n    }\r\n  }\r\n\r\n  if (!listeners.has(eventName)) {\r\n    const handlers = new Set<(event: MessageEvent) => void>()\r\n    const masterHandler = (event: MessageEvent) => {\r\n      handlers.forEach(h => h(event))\r\n    }\r\n    eventSource.addEventListener(eventName, masterHandler)\r\n    listeners.set(eventName, { handlers, masterHandler })\r\n  }\r\n\r\n  const listenerInfo = listeners.get(eventName)!\r\n  listenerInfo.handlers.add(handler)\r\n\r\n  const unsubscribe = () => {\r\n    if (listeners.has(eventName)) {\r\n      const currentListenerInfo = listeners.get(eventName)!\r\n      currentListenerInfo.handlers.delete(handler)\r\n      console.warn(`Unsubscribed a handler from event \"${eventName}\".`)\r\n\r\n      if (currentListenerInfo.handlers.size === 0) {\r\n        eventSource.removeEventListener(eventName, currentListenerInfo.masterHandler)\r\n        listeners.delete(eventName)\r\n        console.warn(`All handlers for event \"${eventName}\" have been removed. Event listener detached.`)\r\n      }\r\n    }\r\n  }\r\n\r\n  return unsubscribe\r\n}\r\n\r\n/**\r\n * 手动关闭全局的 SSE 连接。\r\n */\r\nexport function closeSSEConnection(): void {\r\n  if (sseConnection && sseConnection.eventSource) {\r\n    sseConnection.eventSource.close()\r\n    sseConnection.listeners.clear()\r\n    sseConnection = null\r\n    console.warn(`Global SSE connection to ${SSE_URL} closed.`)\r\n  }\r\n}\r\n"],"mappings":";AAAA,SAAS,iBAAiB;AAE1B,IAAI,UAAkB,UAAU,cAAc,KAAK,UAAU,qBAAqB,KAAK;AACvF,WAAW;AAOX,IAAI,gBAAsC;AAE1C,SAAS,sBAAqC;AAC5C,MAAI,eAAe;AACjB,WAAO;AAAA,EACT;AAEA,MAAI,OAAO,WAAW,eAAe,CAAC,OAAO,aAAa;AACxD,YAAQ,MAAM,mDAAmD;AACjE,oBAAgB,EAAE,aAAa,MAAM,WAAW,oBAAI,IAAI,EAAE;AAC1D,WAAO;AAAA,EACT;AAEA,UAAQ,IAAI,0CAA0C,OAAO,EAAE;AAC/D,QAAM,cAAc,IAAI,YAAY,OAAO;AAC3C,QAAM,YAAY,oBAAI,IAAI;AAC1B,kBAAgB,EAAE,aAAa,UAAU;AAEzC,cAAY,YAAY,CAAC,UAAwB;AAC/C,YAAQ,IAAI,6BAA6B,MAAM,IAAI;AAAA,EACrD;AAEA,cAAY,UAAU,CAAC,UAAiB;AACtC,YAAQ,MAAM,8BAA8B,KAAK;AACjD,gBAAY,MAAM;AAClB,oBAAgB;AAAA,EAClB;AAEA,SAAO;AACT;AAQO,SAAS,eAAe,WAAmB,WAA4C;AAC5F,MAAI,OAAO,cAAc,YAAY;AACnC,YAAQ,MAAM,wCAAwC;AACtD,WAAO,MAAM;AAAA,IAAC;AAAA,EAChB;AAEA,QAAM,EAAE,aAAa,UAAU,IAAI,oBAAoB;AAEvD,MAAI,CAAC,aAAa;AAChB,WAAO,MAAM;AAAA,IAAC;AAAA,EAChB;AAEA,QAAM,UAAU,CAAC,UAAwB;AACvC,QAAI;AACF,YAAM,OAAO,KAAK,MAAM,MAAM,IAAI;AAClC,gBAAU,IAAI;AAAA,IAChB,SACO,OAAO;AACZ,gBAAU,SAAS,MAAM,IAAI;AAAA,IAC/B;AAAA,EACF;AAEA,MAAI,CAAC,UAAU,IAAI,SAAS,GAAG;AAC7B,UAAM,WAAW,oBAAI,IAAmC;AACxD,UAAM,gBAAgB,CAAC,UAAwB;AAC7C,eAAS,QAAQ,OAAK,EAAE,KAAK,CAAC;AAAA,IAChC;AACA,gBAAY,iBAAiB,WAAW,aAAa;AACrD,cAAU,IAAI,WAAW,EAAE,UAAU,cAAc,CAAC;AAAA,EACtD;AAEA,QAAM,eAAe,UAAU,IAAI,SAAS;AAC5C,eAAa,SAAS,IAAI,OAAO;AAEjC,QAAM,cAAc,MAAM;AACxB,QAAI,UAAU,IAAI,SAAS,GAAG;AAC5B,YAAM,sBAAsB,UAAU,IAAI,SAAS;AACnD,0BAAoB,SAAS,OAAO,OAAO;AAC3C,cAAQ,KAAK,sCAAsC,SAAS,IAAI;AAEhE,UAAI,oBAAoB,SAAS,SAAS,GAAG;AAC3C,oBAAY,oBAAoB,WAAW,oBAAoB,aAAa;AAC5E,kBAAU,OAAO,SAAS;AAC1B,gBAAQ,KAAK,2BAA2B,SAAS,+CAA+C;AAAA,MAClG;AAAA,IACF;AAAA,EACF;AAEA,SAAO;AACT;AAKO,SAAS,qBAA2B;AACzC,MAAI,iBAAiB,cAAc,aAAa;AAC9C,kBAAc,YAAY,MAAM;AAChC,kBAAc,UAAU,MAAM;AAC9B,oBAAgB;AAChB,YAAQ,KAAK,4BAA4B,OAAO,UAAU;AAAA,EAC5D;AACF;","names":[]}